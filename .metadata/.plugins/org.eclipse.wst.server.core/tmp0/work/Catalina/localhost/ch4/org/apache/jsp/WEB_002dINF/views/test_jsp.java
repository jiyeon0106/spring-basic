/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2023-04-01 06:46:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1662047140016L));
    _jspx_dependants.put("jar:file:/D:/fast-campus/workspace-sts-3.9.17.RELEASE/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ch4/WEB-INF/lib/jstl-1.2.jar!/META-INF/c-1_0-rt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Title</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-1.11.3.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2>commentTest</h2>\r\n");
      out.write("\tcomment:\r\n");
      out.write("\t<input type=\"text\" name=\"comment\">\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<button id=\"sendBtn\" type=\"button\">SEND</button>\r\n");
      out.write("\t<button id=\"modBtn\" type=\"button\">수정</button>\r\n");
      out.write("\t<div id=\"commentList\"></div>\r\n");
      out.write("\t<div id=\"replyForm\" style=\"display:none\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"replyComment\">\r\n");
      out.write("\t\t<button id=\"wrtRepBtn\" type=\"button\">등록</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tlet bno = 2434;\r\n");
      out.write("\r\n");
      out.write("\t\tlet showList = function(bno) {\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\ttype : 'GET', // 요청 메서드\r\n");
      out.write("\t\t\t\turl : '/ch4/comments?bno=' + bno, // 요청 URI\r\n");
      out.write("\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t$(\"#commentList\").html(toHtml(result)); // 서버로부터 응답이 도착하면 호출될 함수\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\terror : function() {\r\n");
      out.write("\t\t\t\t\talert(\"error\")\r\n");
      out.write("\t\t\t\t} // 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("\t\t\t}); // $.ajax()\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t$(document).ready(function() {\r\n");
      out.write("\t\t\tshowList(bno);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 댓글 수정\r\n");
      out.write("\t\t\t$(\"#modBtn\").click(function() {\r\n");
      out.write("\t\t\t\tlet cno = $(this).attr(\"data-cno\");\r\n");
      out.write("\t\t\t\tlet comment = $(\"input[name=comment]\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (comment.trim() == '') {\r\n");
      out.write("\t\t\t\t\talert(\"댓글을 입력해주세요.\");\r\n");
      out.write("\t\t\t\t\t$(\"input[name=comment]\").focus()\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype : 'PATCH', // 요청 메서드\r\n");
      out.write("\t\t\t\t\turl : '/ch4/comments/' + cno, // 요청 URI // /ch4/comments/70 PATCH\r\n");
      out.write("\t\t\t\t\theaders : {\r\n");
      out.write("\t\t\t\t\t\t\"content-type\" : \"application/json\"\r\n");
      out.write("\t\t\t\t\t}, // 요청 헤더\r\n");
      out.write("\t\t\t\t\tdata : JSON.stringify({\r\n");
      out.write("\t\t\t\t\t\tcno : cno,\r\n");
      out.write("\t\t\t\t\t\tcomment : comment\r\n");
      out.write("\t\t\t\t\t}), // 서버로 전송할 데이터. stringify()로 직렬화 필요.\r\n");
      out.write("\t\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t\talert(result);\r\n");
      out.write("\t\t\t\t\t\tshowList(bno);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror : function() {\r\n");
      out.write("\t\t\t\t\t\talert(\"error\")\r\n");
      out.write("\t\t\t\t\t} // 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("\t\t\t\t}); // $.ajax()\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 댓글에 댓글\r\n");
      out.write("\t\t\t$(\"#wrtRepBtn\").click(function() {\r\n");
      out.write("\t\t\t\tlet comment = $(\"input[name=replyComment]\").val();\r\n");
      out.write("\t\t\t\tlet pcno = $(\"#replyForm\").parent().attr(\"data-pcno\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (comment.trim() == '') {\r\n");
      out.write("\t\t\t\t\talert(\"댓글을 입력해주세요.\");\r\n");
      out.write("\t\t\t\t\t$(\"input[name=comment]\").focus()\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype : 'POST', // 요청 메서드\r\n");
      out.write("\t\t\t\t\turl : '/ch4/comments?bno=' + bno, // 요청 URI // /ch4/comments?bno=2435 POST\r\n");
      out.write("\t\t\t\t\theaders : {\r\n");
      out.write("\t\t\t\t\t\t\"content-type\" : \"application/json\"\r\n");
      out.write("\t\t\t\t\t}, // 요청 헤더\r\n");
      out.write("\t\t\t\t\tdata : JSON.stringify({\r\n");
      out.write("\t\t\t\t\t\tpcno : pcno,\r\n");
      out.write("\t\t\t\t\t\tbno : bno,\r\n");
      out.write("\t\t\t\t\t\tcomment : comment\r\n");
      out.write("\t\t\t\t\t}), // 서버로 전송할 데이터. stringify()로 직렬화 필요.\r\n");
      out.write("\t\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t\talert(result);\r\n");
      out.write("\t\t\t\t\t\tshowList(bno);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror : function() {\r\n");
      out.write("\t\t\t\t\t\talert(\"error\")\r\n");
      out.write("\t\t\t\t\t} // 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("\t\t\t\t}); // $.ajax()\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#replyForm\").css(\"display\", \"none\")\r\n");
      out.write("\t\t\t\t$(\"input[name=replyComment]\").val('')\r\n");
      out.write("\t\t\t\t$(\"#replyForm\").appendTo(\"body\");\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t$(\"#sendBtn\").click(function() {\r\n");
      out.write("\t\t\t\tlet comment = $(\"input[name=comment]\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (comment.trim() == '') {\r\n");
      out.write("\t\t\t\t\talert(\"댓글을 입력해주세요.\");\r\n");
      out.write("\t\t\t\t\t$(\"input[name=comment]\").focus()\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype : 'POST', // 요청 메서드\r\n");
      out.write("\t\t\t\t\turl : '/ch4/comments?bno=' + bno, // 요청 URI // /ch4/comments?bno=2435 POST\r\n");
      out.write("\t\t\t\t\theaders : {\r\n");
      out.write("\t\t\t\t\t\t\"content-type\" : \"application/json\"\r\n");
      out.write("\t\t\t\t\t}, // 요청 헤더\r\n");
      out.write("\t\t\t\t\tdata : JSON.stringify({\r\n");
      out.write("\t\t\t\t\t\tbno : bno,\r\n");
      out.write("\t\t\t\t\t\tcomment : comment\r\n");
      out.write("\t\t\t\t\t}), // 서버로 전송할 데이터. stringify()로 직렬화 필요.\r\n");
      out.write("\t\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t\talert(result);\r\n");
      out.write("\t\t\t\t\t\tshowList(bno);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror : function() {\r\n");
      out.write("\t\t\t\t\t\talert(\"error\")\r\n");
      out.write("\t\t\t\t\t} // 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("\t\t\t\t}); // $.ajax()\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 댓글 수정\r\n");
      out.write("\t\t\t$(\"#commentList\").on(\"click\", \".modBtn\", function() {\r\n");
      out.write("\t\t\t\tlet cno = $(this).parent().attr(\"data-cno\");\r\n");
      out.write("\t\t\t\tlet comment = $(\"span.comment\", $(this).parent()).text();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 1. comment의 내용을 input에 뿌려주기\r\n");
      out.write("\t\t\t\t$(\"input[name=comment]\").val(comment);\r\n");
      out.write("\t\t\t\t// 2. cno 전달하기\r\n");
      out.write("\t\t\t\t$(\"#modBtn\").attr(\"data-cno\", cno);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 댓글에 댓글\r\n");
      out.write("\t\t\t$(\"#commentList\").on(\"click\", \".replyBtn\", function() {\r\n");
      out.write("\t\t\t\t// 1. replyForm을 옮기고\r\n");
      out.write("\t\t\t\t$(\"#replyForm\").appendTo($(this).parent());\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 2. 답글을 입력할 폼을 보여주고\r\n");
      out.write("\t\t\t\t$(\"#replyForm\").css(\"display\", \"block\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t//             $(\".delBtn\").click(function(){\r\n");
      out.write("\t\t\t$(\"#commentList\").on(\"click\", \".delBtn\", function() {\r\n");
      out.write("\t\t\t\tlet cno = $(this).parent().attr(\"data-cno\");\r\n");
      out.write("\t\t\t\tlet bno = $(this).parent().attr(\"data-bno\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype : 'DELETE', // 요청 메서드\r\n");
      out.write("\t\t\t\t\turl : '/ch4/comments/' + cno + '?bno=' + bno, // 요청 URI\r\n");
      out.write("\t\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t\talert(result)\r\n");
      out.write("\t\t\t\t\t\tshowList(bno);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror : function() {\r\n");
      out.write("\t\t\t\t\t\talert(\"error\")\r\n");
      out.write("\t\t\t\t\t} // 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("\t\t\t\t}); // $.ajax()\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet toHtml = function(comments) {\r\n");
      out.write("\t\t\tlet tmp = \"<ul>\";\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tcomments.forEach(function(comment) {\r\n");
      out.write("\t\t\ttmp += '<li data-cno=' + comment.cno\r\n");
      out.write("\t\t\ttmp += ' data-pcno=' + comment.pcno\r\n");
      out.write("\t\t\ttmp += ' data-bno=' + comment.bno + '>'\r\n");
      out.write("\t\t\tif(comment.cno != comment.pcno)\r\n");
      out.write("\t\t\t\ttmp += 'ㄴ'\r\n");
      out.write("\t\t\ttmp += ' commenter=<span class=\"commenter\">' + comment.commenter + '</span>'\r\n");
      out.write("\t\t\ttmp += ' comment=<span class=\"comment\">' + comment.comment + '</span>'\r\n");
      out.write("\t\t\ttmp += ' up_date=' + comment.up_date\r\n");
      out.write("\t\t\ttmp += '<button class=\"delBtn\">삭제</button>'\r\n");
      out.write("\t\t\ttmp += '<button class=\"modBtn\">수정</button>'\r\n");
      out.write("\t\t\ttmp += '<button class=\"replyBtn\">답글</button>'\r\n");
      out.write("\t\t\ttmp += '</li>'\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\treturn tmp + \"</ul>\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
